import type { GetStaticPaths, GetStaticProps, NextPage } from "next";
import Head from "next/head";
import { markdownToHtml } from "../../libs/markdown/converters";
import { getAllPosts, getPostBySlug } from "../../libs/markdownPosts";
import { PageLayout } from "../../components/Layouts/PageLayout";

const Home: NextPage = (props) => {
  return (
    <PageLayout title={`Blog`}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <pre>
        <code>{JSON.stringify(props, null, 2)}</code>
      </pre>
    </PageLayout>
  );
};

export default Home;

export const getStaticPaths: GetStaticPaths = async () => {
  const slugs = getAllPosts();
  console.log(
    slugs.filter((slug) => {
      if (!Array.isArray(slug)) {
        return false;
      }
      return slug[0] === "blog";
    })
  );
  return {
    paths: slugs
      .filter((slug) => {
        if (!Array.isArray(slug)) {
          return false;
        }
        return slug[0] === "blog";
      })
      .map((slug) => ({
        params: {
          slug: Array.isArray(slug) ? slug.join("/") : slug,
        },
      })),
    fallback: "blocking",
  };
};

export const getStaticProps: GetStaticProps = async ({ params }) => {
  if (!params || !params.slug) {
    return {
      notFound: true,
    };
  }
  const slug = (() => {
    if (Array.isArray(params.slug)) return params.slug.join("/");
    if (!/^blog\//.test(params.slug)) {
      return `blog/${params.slug}`;
    }
    return params.slug;
  })();
  try {
    const post = getPostBySlug(slug, ["date", "title", "content"]);
    return {
      props: {
        post: {
          ...post,
          content: await markdownToHtml(post.content as any),
        },
      },
    };
  } catch (e) {
    console.log(e);
    return {
      notFound: true,
    };
  }
};
